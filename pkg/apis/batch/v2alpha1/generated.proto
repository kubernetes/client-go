/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.kubernetes.pkg.apis.batch.v2alpha1;

import "k8s.io/kubernetes/pkg/api/resource/generated.proto";
import "k8s.io/kubernetes/pkg/api/unversioned/generated.proto";
import "k8s.io/kubernetes/pkg/api/v1/generated.proto";
import "k8s.io/kubernetes/pkg/runtime/generated.proto";
import "k8s.io/kubernetes/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v2alpha1";

// CronJob represents the configuration of a single cron job.
message CronJob {
  // Standard object's metadata.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Spec is a structure defining the expected behavior of a job, including the schedule.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional CronJobSpec spec = 2;

  // Status is a structure describing current status of a job.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional CronJobStatus status = 3;
}

// CronJobList is a collection of cron jobs.
message CronJobList {
  // Standard list metadata
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.ListMeta metadata = 1;

  // Items is the list of CronJob.
  repeated CronJob items = 2;
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
message CronJobSpec {
  // Schedule contains the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
  optional string schedule = 1;

  // Optional deadline in seconds for starting the job if it misses scheduled
  // time for any reason.  Missed jobs executions will be counted as failed ones.
  // +optional
  optional int64 startingDeadlineSeconds = 2;

  // ConcurrencyPolicy specifies how to treat concurrent executions of a Job.
  // +optional
  optional string concurrencyPolicy = 3;

  // Suspend flag tells the controller to suspend subsequent executions, it does
  // not apply to already started executions.  Defaults to false.
  // +optional
  optional bool suspend = 4;

  // JobTemplate is the object that describes the job that will be created when
  // executing a CronJob.
  optional JobTemplateSpec jobTemplate = 5;
}

// CronJobStatus represents the current state of a cron job.
message CronJobStatus {
  // Active holds pointers to currently running jobs.
  // +optional
  repeated k8s.io.kubernetes.pkg.api.v1.ObjectReference active = 1;

  // LastScheduleTime keeps information of when was the last time the job was successfully scheduled.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time lastScheduleTime = 4;
}

// Job represents the configuration of a single job.
message Job {
  // Standard object's metadata.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Spec is a structure defining the expected behavior of a job.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional JobSpec spec = 2;

  // Status is a structure describing current status of a job.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional JobStatus status = 3;
}

// JobCondition describes current state of a job.
message JobCondition {
  // Type of job condition, Complete or Failed.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition was checked.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time lastProbeTime = 3;

  // Last time the condition transit from one status to another.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time lastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

// JobList is a collection of jobs.
message JobList {
  // Standard list metadata
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.ListMeta metadata = 1;

  // Items is the list of Job.
  repeated Job items = 2;
}

// JobSpec describes how the job execution will look like.
message JobSpec {
  // Parallelism specifies the maximum desired number of pods the job should
  // run at any given time. The actual number of pods running in steady state will
  // be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
  // i.e. when the work left to do is less than max parallelism.
  // More info: http://kubernetes.io/docs/user-guide/jobs
  // +optional
  optional int32 parallelism = 1;

  // Completions specifies the desired number of successfully finished pods the
  // job should be run with.  Setting to nil means that the success of any
  // pod signals the success of all pods, and allows parallelism to have any positive
  // value.  Setting to 1 means that parallelism is limited to 1 and the success of that
  // pod signals the success of the job.
  // More info: http://kubernetes.io/docs/user-guide/jobs
  // +optional
  optional int32 completions = 2;

  // Optional duration in seconds relative to the startTime that the job may be active
  // before the system tries to terminate it; value must be positive integer
  // +optional
  optional int64 activeDeadlineSeconds = 3;

  // Selector is a label query over pods that should match the pod count.
  // Normally, the system sets this field for you.
  // More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.LabelSelector selector = 4;

  // ManualSelector controls generation of pod labels and pod selectors.
  // Leave `manualSelector` unset unless you are certain what you are doing.
  // When false or unset, the system pick labels unique to this job
  // and appends those labels to the pod template.  When true,
  // the user is responsible for picking unique labels and specifying
  // the selector.  Failure to pick a unique label may cause this
  // and other jobs to not function correctly.  However, You may see
  // `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
  // API.
  // More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md
  // +optional
  optional bool manualSelector = 5;

  // Template is the object that describes the pod that will be created when
  // executing a job.
  // More info: http://kubernetes.io/docs/user-guide/jobs
  optional k8s.io.kubernetes.pkg.api.v1.PodTemplateSpec template = 6;
}

// JobStatus represents the current state of a Job.
message JobStatus {
  // Conditions represent the latest available observations of an object's current state.
  // More info: http://kubernetes.io/docs/user-guide/jobs
  // +optional
  repeated JobCondition conditions = 1;

  // StartTime represents time when the job was acknowledged by the Job Manager.
  // It is not guaranteed to be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time startTime = 2;

  // CompletionTime represents time when the job was completed. It is not guaranteed to
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time completionTime = 3;

  // Active is the number of actively running pods.
  // +optional
  optional int32 active = 4;

  // Succeeded is the number of pods which reached Phase Succeeded.
  // +optional
  optional int32 succeeded = 5;

  // Failed is the number of pods which reached Phase Failed.
  // +optional
  optional int32 failed = 6;
}

// JobTemplate describes a template for creating copies of a predefined pod.
message JobTemplate {
  // Standard object's metadata.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Template defines jobs that will be created from this template
  // http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional JobTemplateSpec template = 2;
}

// JobTemplateSpec describes the data a Job should have when created from a template
message JobTemplateSpec {
  // Standard object's metadata of the jobs created from this template.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the job.
  // More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status
  // +optional
  optional JobSpec spec = 2;
}

